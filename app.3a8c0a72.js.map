{"version":3,"sources":["webpack:///./src/pic-ratio-fill/picRatioFill/imgCalc.js","webpack:///./src/pic-ratio-fill/picRatioFill/PicRatioFill.js","webpack:///./src/pic-ratio-fill/index.js","webpack:///./src/index.js"],"names":["calcImage","img","containerWidth","containerHeight","a","imageWidth","naturalWidth","imageHeight","naturalHeight","willFitWidth","calcWillFitWidth","getMaxColor","colorRgb","colorRgbOpposite","imageTarget","doOpposite","Promise","resolve","reject","crossOrigin","canvasTwo","document","createElement","width","height","top","left","getContext","drawImage","newImg","toDataURL","objImg","src","colorThief","ColorThief","calcColors","color","getColor","complete","addEventListener","PicRatioFill","style","classes","useStyle","useState","colorCalc","setColorCalc","colorRgbValue","colorRgbOppositeValue","className","imageContainerWidthFit","imageContainerHeightFit","picBorderWidth","picBorderHeight","backgroundColor","fitWidth","fitHeight","onLoad","event","target","then","result","console","log","makeStyles","props","zIndex","overflow","display","marginLeft","marginRight","position","transform","PicRatioExample","margin","marginBottom","render","querySelector"],"mappings":"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","file":"app.3a8c0a72.js","sourcesContent":["import ColorThief from \"colorthief\";\r\n\r\nexport const calcImage = async (img, containerWidth, containerHeight) => {\r\n    const imageWidth = img.naturalWidth;\r\n    const imageHeight = img.naturalHeight;\r\n    const willFitWidth = calcWillFitWidth(containerWidth, containerHeight,\r\n        imageWidth, imageHeight);\r\n\r\n    const colorRgb = await getMaxColor(img, willFitWidth);\r\n    const colorRgbOpposite = await getMaxColor(img, willFitWidth, true);\r\n\r\n    return {willFitWidth, colorRgb, colorRgbOpposite};\r\n};\r\n\r\nexport const calcWillFitWidth = (containerWidth, containerHeight, imageWidth, imageHeight) => {\r\n    return (containerWidth / imageWidth) <= (containerHeight / imageHeight);\r\n};\r\n\r\nexport const getMaxColor = (imageTarget, willFitWidth, doOpposite = false) => {\r\n    return new Promise((resolve, reject) => {\r\n        const sliverSize = 15;\r\n        const img = imageTarget;\r\n        img.crossOrigin = \"Anonymous\";\r\n        const canvasTwo = document.createElement('canvas');\r\n        canvasTwo.width = willFitWidth ? img.naturalWidth : sliverSize;\r\n        canvasTwo.height = willFitWidth ? sliverSize : img.naturalHeight;\r\n\r\n        //fitWidth and is Opposite (bottom)\r\n        let top = img.naturalHeight - sliverSize;\r\n        let left = 0;\r\n        //fit Height and is Opposite\r\n        if(!willFitWidth && doOpposite) {\r\n            top = 0;\r\n            left = img.naturalWidth - sliverSize;\r\n        } //fit width and not opposite\r\n        else if(!doOpposite) {\r\n            top = 0;\r\n            left = 0\r\n        }\r\n\r\n        canvasTwo.getContext('2d').drawImage(\r\n            img, left, top, canvasTwo.width, canvasTwo.height,\r\n            0, 0, canvasTwo.width, canvasTwo.height);\r\n\r\n        const newImg = canvasTwo.toDataURL();\r\n\r\n        //const fac = new FastAverageColor();\r\n        const objImg = document.createElement('img');\r\n        objImg.src = newImg;\r\n        const colorThief = new ColorThief();\r\n\r\n        const calcColors = () => {\r\n            const color = colorThief.getColor(objImg);\r\n            resolve(color);\r\n        };\r\n\r\n        if(objImg.complete) {\r\n            calcColors();\r\n        } else {\r\n            objImg.addEventListener(\"load\", ()=> {\r\n                calcColors();\r\n            })\r\n        }\r\n    });\r\n};\r\n","import React, {useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {calcImage} from \"./imgCalc\";\r\n\r\nexport const PicRatioFill = ({src, width, height, style}) => {\r\n\r\n    const classes = useStyle({\r\n        containerWidth: width,\r\n        containerHeight: height\r\n    });\r\n\r\n    const [colorCalc, setColorCalc] = useState({\r\n        willFitWidth: true,\r\n        colorRgb: [0,0,0],\r\n        colorRgbOpposite:[0,0,0]\r\n    });\r\n    const {willFitWidth, colorRgb, colorRgbOpposite} = colorCalc;\r\n\r\n    const colorRgbValue = `rgb(${colorRgb[0]},${colorRgb[1]}, ${colorRgb[2]})`;\r\n    const colorRgbOppositeValue = `rgb(${colorRgbOpposite[0]},${colorRgbOpposite[1]}, ${colorRgbOpposite[2]})`;\r\n\r\n    return (\r\n        <div\r\n            style={style}\r\n            className={willFitWidth ?\r\n                classes.imageContainerWidthFit :\r\n                classes.imageContainerHeightFit\r\n                }\r\n        >\r\n            <div\r\n                className={willFitWidth ? classes.picBorderWidth : classes.picBorderHeight}\r\n                style={{backgroundColor: colorRgbValue}}\r\n            />\r\n\r\n            <div\r\n                className={willFitWidth ? classes.fitWidth : classes.fitHeight}\r\n            >\r\n            <img\r\n                src={src}\r\n                className={willFitWidth ? classes.fitWidth : classes.fitHeight}\r\n                onLoad={(event) => {\r\n                    calcImage(event.target, width, height).then(\r\n                        (result) => {\r\n                            console.log(result);\r\n                            setColorCalc(result);\r\n                        }\r\n                    );\r\n                }}\r\n            />\r\n            </div>\r\n\r\n            <div\r\n                className={willFitWidth ? classes.picBorderWidth : classes.picBorderHeight}\r\n                style={{backgroundColor: colorRgbOppositeValue}}\r\n            />\r\n        </div>\r\n    )\r\n};\r\n\r\nconst useStyle = makeStyles({\r\n    picBorderHeight: {\r\n        width: \"50%\",\r\n        height: props => props.containerHeight,\r\n        zIndex: 1,\r\n    },\r\n    picBorderWidth: {\r\n        width: \"100%\",\r\n        height: \"50%\",\r\n        zIndex: 1,\r\n    },\r\n    imageContainerHeightFit : {\r\n        width: props => props.containerWidth,\r\n        height: props => props.containerHeight,\r\n        overflow: \"hidden\",\r\n        backgroundColor: \"#afcdee\",\r\n        display:\"flex\"\r\n    },\r\n    imageContainerWidthFit : {\r\n        width: props => props.containerWidth,\r\n        height: props => props.containerHeight,\r\n        overflow: \"hidden\",\r\n        backgroundColor: \"#afcdee\"\r\n    },\r\n    fitHeight: {\r\n        height: \"100%\",\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\",\r\n        position: \"relative\",\r\n        zIndex: 2\r\n    },\r\n    fitWidth: {\r\n        width: \"inherit\",\r\n        position: \"absolute\",\r\n        transform: \"translateY(-50%)\",\r\n        zIndex: 2\r\n    }\r\n});","import React from \"react\";\r\nimport {PicRatioFill} from \"./picRatioFill/PicRatioFill\";\r\n\r\nexport const PicRatioExample = ()=> {\r\n\r\n    return (\r\n        <div style={{margin: 30}}>\r\n            <h1>Pic Ratio Fill</h1>\r\n            <p>Example : Fit to width</p>\r\n            <PicRatioFill\r\n                src=\"sample.jpg\"\r\n                width={330}\r\n                height={260}\r\n                style={{marginBottom: 20}}\r\n            />\r\n            <p>Example : Fit to Height</p>\r\n            <PicRatioFill\r\n                src=\"sample2.jpg\"\r\n                width={330}\r\n                height={260}\r\n            />\r\n\r\n        </div>\r\n    )\r\n};","import './index.css'\r\nimport React from 'react'\r\nimport {render} from 'react-dom'\r\nimport {PicRatioExample} from \"./pic-ratio-fill\";\r\n\r\nrender(<PicRatioExample />, document.querySelector('#app'));\r\n\r\n"],"sourceRoot":""}